S = 10
T = '13'
K = 0-9
O(S * T * K) ~ O(n^3)

dp[i][j]
i: first i el of S
j: len of longest suffix of S which is a prefix of T

S = 10
T = '1234'
K = 0-9

--> i: first i el of S
i = 0: 0
dp[0][0] = 0
i = 1: 10
dp[1][0] = 10
dp[1][1] = 1
i = 2: 100
dp[2][0] = 1900
dp[2][1] = 10
dp[2][2] = 1
i = 3: 1000
dp[3][0] = 1000
dp[3][1] = 100
dp[3][2] = 10
dp[3][3] = 1
i = 4: 10000 - 1 = 9999
dp[4][0] = 9999
dp[4][1] = 1000
dp[4][2] = 100
dp[4][3] = 10
dp[4][4] = 1
i = 5: |_|_|_|_|_|
99990 - dp[5][4] = 99980
dp[5][4] = 1 * dp[4][3] = 1 * 1 * dp[3][2] = ... = dp[2][1]
i = 6:
999800 - dp[6][4]
dp[6][4] = 1 * dp[5][3] = 1 * 1 * dp[4][2] = ... = 100
i = 7:
9996000
i = 8:
99960000 - dp[8][4] = 99950001
dp[8][4] = 
i = 9:
999400000
i = 10:
9993000000

3rd try:
1     R[n] = R[n - 1] * k - R[n - t]
2          = R[n - 2] * k^2 - R[n - t - 1] * k - R[n - t]
...        = R[n - 3] * k^3 - R[n - t - 2] * k^2 - R[n - t - 1] * k - R[n - t]
t          = R[n - t] * k^t - R[n - t - (t - 1)] * k^(t - 1) ... - R[n - t] * k^0
           = R[n - t] * (k^t - 1) - sum R[n - t - i]*k^i for i from 1 to t - 1
           n - t - (t - 1) = n + 2t + 1
Case t = 2
     R[n] = 99R[n - 2] - 10R[n - 3]
Case t = 4
     R[n] = 9999R[n - 4] - 10R[n - 5] - 100R[n - 6] - 1000R[n - 7]

Maxtrix exponentiation
Case t = 2
     R[n] = 0R[n - 1] + 99R[n - 2] - 10R[n - 3]
     [First Matrix]  [Second matrix]     [Third Matrix]
     | F(n)   |  =  | x11 x12 x13 |  *   | F(n-1) |
     | F(n-1) |     | x21 x22 x23 |      | F(n-2) |
     | F(n-2) |     | x31 x32 x33 |      | F(n-3) |

     [First Matrix]  [Second matrix]     [Third Matrix]
     | F(n)   |  =  |  0   99 -10 |  *   | F(n-1) |
     | F(n-1) |     |  1   0   0  |      | F(n-2) |
     | F(n-2) |     |  0   1   0  |      | F(n-3) |

     Base case: R[0] to R[2]

     First n after base case: n = 3 => 2nd matrix ^ 1
     => n => 2nd matrix ^ n - 2
     | F(n)   |  =  [|  0   99 -10 |] ^ (n - 2)  *   | F(n-1) |
     | F(n-1) |     [|  1   0   0  |]                | F(n-2) |
     | F(n-2) |     [|  0   1   0  |]                | F(n-3) |

Case t = t
     2nd Matrix size = n - 2t + 1 to n - 1
     s = n - 1 - (n + 2t - 1) + 1 = 2t - 1
     => s = 2t - 1
     Base case: R[0] to R[s - 1]
     First n after base case: n = s => 2nd matrix ^ 1
     => n => 2nd matrix ^ n - (s - 1) = 2nd matrix ^ n - s + 1
Case t = 4 => s = 7
     Base case: R[0] to R[6]
     First n after base case: n = 7 => 2nd matrix ^ 1
     => n => 2nd matrix ^ n - 6
Case t = 50 => s = 99
     Base case: R[0] to R[98]
     First n after base case: n = 99 => 2nd matrix ^ 1
     => n => 2nd matrix ^ n - 98

2nd try:
    dp[n][0] = dp[n - 1][0] * k - dp[n][t]
    dp[n][0] = dp[n - 1][0] * k - dp[n - t][0]
             = (dp[n - 2][0] * k - dp[n - 1 - t]) * k - dp[n - t][0]
             = dp[n - 2][0] * k^2 - dp[n - 1 - t] * k - dp[n - t][0]

    R[n] = R[n - 1] * k - R[n - t]
         = R[n - 2] * k^2 - R[n - t - 1] * k - R[n - t]
         = R[n - 3] * k^3 - R[n - t - 2] * k^2 - R[n - t - 1] * k - R[n - t]
         = R[n - i] * k^i - sum R[n - t - j] * k^j for j from 0 to i - 1
         = R[t - 1] * k^(v_max + 1) - sum R[u] * k^v for u from 0 to n - t, v from n - t to 0
         = k^(t - 1) * k^(n - t + 1) - sum R[u] * k^v for u from 0 to n - t, v from n - t to 0

    t = 2, k = 10
    R[5] = R[1] * k^(v_max + 1) - (R[0] * k^3 + R[1] * k^2 + R[2] * k^1 + R[3] * k^0)
         = 10 * 10000 - (1000 + 1000 + 990 + 980)





    n >= t 
    n - t - j >= 0
    u = n - t - j => j = n - t - u
    n - t >= i - 1
    t = 2
    --> len(R) = 3
0    R[0] = 1
1    R[1] = 10
2    R[2] = R[1] * k - R[0] = 99
3    tmp = R[2] * k - R[1] = 980
     R[0] = R[1] = 10
     R[1] = R[2] = 99
     R[2] = tmp = 980
4    tmp = R[2] * k - R[1] = 9701
     R[0] = R[1] = 99
     R[1] = R[2] = 980
     R[2] = tmp = 9701
5    R[2] = R[2] * k - R[1] = 96030

Wrong formula:
    t = len(T)
    k is available chars
    R_n = R_{n - 1} * k - dp[n][t]
        = R_{n - 2} * k ** 2  - dp[n - 1][t] - dp[n][t]

    dp[n][t] = dp[n - k][t - k]
    let t - k = 0 => k = t
    then dp[n - t][0] = R_{n - t}


    R_n = R_{n - 1} * k - R_{n - t}
        = R_{n - 2} * k ** 2 - R_{n - t -1} - R_{n - t}
        = R_{n - 3} * k ** 3 - R_{n - t - 2} - R_{n - t -1} - R_{n - t}
        = R_{n - u} * k ** u - R_{n - t - (u - 1)} - R_{n - t - (u - 2)} - ... - R_{n - t}
        = R_{n - u} * k ** u - (R_{n - t - (u - 1)} + R_{n - t - (u - 2)} + ... + R_{n - t})
        = R_{n - u} * k ** u - sum R_{n - t - v} for v from u - 1 v to 0
        = ...
        = R_{t - 1} * k ** n - t + 1 - sum R_{n - t - v} for v from n - t + 1 - 1 to 0
        = k ** t - 1 * k ** n - t + 1 - sum R_{n - t - v} for v from n - t to 0
        = k ** n - sum R_{n - t - v} for v from n - t to 0
        = k ** n - sum R_{i} for v from 0 to n - t
    constraint: n - t - v >= 0 => n - t >= v and v_max = u - 1
    then n - t >= u - 1 => n - u >= t - 1
    when n - u = t - 1 then u = n - t + 1



